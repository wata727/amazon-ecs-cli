// Copyright 2015-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/aws/aws-sdk-go/service/cloudwatchevents/cloudwatcheventsiface (interfaces: CloudWatchEventsAPI)

package mock_cloudwatcheventsiface

import (
	aws "github.com/aws/aws-sdk-go/aws"
	request "github.com/aws/aws-sdk-go/aws/request"
	cloudwatchevents "github.com/aws/aws-sdk-go/service/cloudwatchevents"
	gomock "github.com/golang/mock/gomock"
)

// Mock of CloudWatchEventsAPI interface
type MockCloudWatchEventsAPI struct {
	ctrl     *gomock.Controller
	recorder *_MockCloudWatchEventsAPIRecorder
}

// Recorder for MockCloudWatchEventsAPI (not exported)
type _MockCloudWatchEventsAPIRecorder struct {
	mock *MockCloudWatchEventsAPI
}

func NewMockCloudWatchEventsAPI(ctrl *gomock.Controller) *MockCloudWatchEventsAPI {
	mock := &MockCloudWatchEventsAPI{ctrl: ctrl}
	mock.recorder = &_MockCloudWatchEventsAPIRecorder{mock}
	return mock
}

func (_m *MockCloudWatchEventsAPI) EXPECT() *_MockCloudWatchEventsAPIRecorder {
	return _m.recorder
}

func (_m *MockCloudWatchEventsAPI) DeleteRule(_param0 *cloudwatchevents.DeleteRuleInput) (*cloudwatchevents.DeleteRuleOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteRule", _param0)
	ret0, _ := ret[0].(*cloudwatchevents.DeleteRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCloudWatchEventsAPIRecorder) DeleteRule(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteRule", arg0)
}

func (_m *MockCloudWatchEventsAPI) DeleteRuleRequest(_param0 *cloudwatchevents.DeleteRuleInput) (*request.Request, *cloudwatchevents.DeleteRuleOutput) {
	ret := _m.ctrl.Call(_m, "DeleteRuleRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.DeleteRuleOutput)
	return ret0, ret1
}

func (_mr *_MockCloudWatchEventsAPIRecorder) DeleteRuleRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteRuleRequest", arg0)
}

func (_m *MockCloudWatchEventsAPI) DeleteRuleWithContext(_param0 aws.Context, _param1 *cloudwatchevents.DeleteRuleInput, _param2 ...request.Option) (*cloudwatchevents.DeleteRuleOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DeleteRuleWithContext", _s...)
	ret0, _ := ret[0].(*cloudwatchevents.DeleteRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCloudWatchEventsAPIRecorder) DeleteRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteRuleWithContext", _s...)
}

func (_m *MockCloudWatchEventsAPI) DescribeEventBus(_param0 *cloudwatchevents.DescribeEventBusInput) (*cloudwatchevents.DescribeEventBusOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeEventBus", _param0)
	ret0, _ := ret[0].(*cloudwatchevents.DescribeEventBusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCloudWatchEventsAPIRecorder) DescribeEventBus(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeEventBus", arg0)
}

func (_m *MockCloudWatchEventsAPI) DescribeEventBusRequest(_param0 *cloudwatchevents.DescribeEventBusInput) (*request.Request, *cloudwatchevents.DescribeEventBusOutput) {
	ret := _m.ctrl.Call(_m, "DescribeEventBusRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.DescribeEventBusOutput)
	return ret0, ret1
}

func (_mr *_MockCloudWatchEventsAPIRecorder) DescribeEventBusRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeEventBusRequest", arg0)
}

func (_m *MockCloudWatchEventsAPI) DescribeEventBusWithContext(_param0 aws.Context, _param1 *cloudwatchevents.DescribeEventBusInput, _param2 ...request.Option) (*cloudwatchevents.DescribeEventBusOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DescribeEventBusWithContext", _s...)
	ret0, _ := ret[0].(*cloudwatchevents.DescribeEventBusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCloudWatchEventsAPIRecorder) DescribeEventBusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeEventBusWithContext", _s...)
}

func (_m *MockCloudWatchEventsAPI) DescribeRule(_param0 *cloudwatchevents.DescribeRuleInput) (*cloudwatchevents.DescribeRuleOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeRule", _param0)
	ret0, _ := ret[0].(*cloudwatchevents.DescribeRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCloudWatchEventsAPIRecorder) DescribeRule(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeRule", arg0)
}

func (_m *MockCloudWatchEventsAPI) DescribeRuleRequest(_param0 *cloudwatchevents.DescribeRuleInput) (*request.Request, *cloudwatchevents.DescribeRuleOutput) {
	ret := _m.ctrl.Call(_m, "DescribeRuleRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.DescribeRuleOutput)
	return ret0, ret1
}

func (_mr *_MockCloudWatchEventsAPIRecorder) DescribeRuleRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeRuleRequest", arg0)
}

func (_m *MockCloudWatchEventsAPI) DescribeRuleWithContext(_param0 aws.Context, _param1 *cloudwatchevents.DescribeRuleInput, _param2 ...request.Option) (*cloudwatchevents.DescribeRuleOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DescribeRuleWithContext", _s...)
	ret0, _ := ret[0].(*cloudwatchevents.DescribeRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCloudWatchEventsAPIRecorder) DescribeRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeRuleWithContext", _s...)
}

func (_m *MockCloudWatchEventsAPI) DisableRule(_param0 *cloudwatchevents.DisableRuleInput) (*cloudwatchevents.DisableRuleOutput, error) {
	ret := _m.ctrl.Call(_m, "DisableRule", _param0)
	ret0, _ := ret[0].(*cloudwatchevents.DisableRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCloudWatchEventsAPIRecorder) DisableRule(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DisableRule", arg0)
}

func (_m *MockCloudWatchEventsAPI) DisableRuleRequest(_param0 *cloudwatchevents.DisableRuleInput) (*request.Request, *cloudwatchevents.DisableRuleOutput) {
	ret := _m.ctrl.Call(_m, "DisableRuleRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.DisableRuleOutput)
	return ret0, ret1
}

func (_mr *_MockCloudWatchEventsAPIRecorder) DisableRuleRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DisableRuleRequest", arg0)
}

func (_m *MockCloudWatchEventsAPI) DisableRuleWithContext(_param0 aws.Context, _param1 *cloudwatchevents.DisableRuleInput, _param2 ...request.Option) (*cloudwatchevents.DisableRuleOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DisableRuleWithContext", _s...)
	ret0, _ := ret[0].(*cloudwatchevents.DisableRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCloudWatchEventsAPIRecorder) DisableRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DisableRuleWithContext", _s...)
}

func (_m *MockCloudWatchEventsAPI) EnableRule(_param0 *cloudwatchevents.EnableRuleInput) (*cloudwatchevents.EnableRuleOutput, error) {
	ret := _m.ctrl.Call(_m, "EnableRule", _param0)
	ret0, _ := ret[0].(*cloudwatchevents.EnableRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCloudWatchEventsAPIRecorder) EnableRule(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EnableRule", arg0)
}

func (_m *MockCloudWatchEventsAPI) EnableRuleRequest(_param0 *cloudwatchevents.EnableRuleInput) (*request.Request, *cloudwatchevents.EnableRuleOutput) {
	ret := _m.ctrl.Call(_m, "EnableRuleRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.EnableRuleOutput)
	return ret0, ret1
}

func (_mr *_MockCloudWatchEventsAPIRecorder) EnableRuleRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EnableRuleRequest", arg0)
}

func (_m *MockCloudWatchEventsAPI) EnableRuleWithContext(_param0 aws.Context, _param1 *cloudwatchevents.EnableRuleInput, _param2 ...request.Option) (*cloudwatchevents.EnableRuleOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "EnableRuleWithContext", _s...)
	ret0, _ := ret[0].(*cloudwatchevents.EnableRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCloudWatchEventsAPIRecorder) EnableRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EnableRuleWithContext", _s...)
}

func (_m *MockCloudWatchEventsAPI) ListRuleNamesByTarget(_param0 *cloudwatchevents.ListRuleNamesByTargetInput) (*cloudwatchevents.ListRuleNamesByTargetOutput, error) {
	ret := _m.ctrl.Call(_m, "ListRuleNamesByTarget", _param0)
	ret0, _ := ret[0].(*cloudwatchevents.ListRuleNamesByTargetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCloudWatchEventsAPIRecorder) ListRuleNamesByTarget(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListRuleNamesByTarget", arg0)
}

func (_m *MockCloudWatchEventsAPI) ListRuleNamesByTargetRequest(_param0 *cloudwatchevents.ListRuleNamesByTargetInput) (*request.Request, *cloudwatchevents.ListRuleNamesByTargetOutput) {
	ret := _m.ctrl.Call(_m, "ListRuleNamesByTargetRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.ListRuleNamesByTargetOutput)
	return ret0, ret1
}

func (_mr *_MockCloudWatchEventsAPIRecorder) ListRuleNamesByTargetRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListRuleNamesByTargetRequest", arg0)
}

func (_m *MockCloudWatchEventsAPI) ListRuleNamesByTargetWithContext(_param0 aws.Context, _param1 *cloudwatchevents.ListRuleNamesByTargetInput, _param2 ...request.Option) (*cloudwatchevents.ListRuleNamesByTargetOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ListRuleNamesByTargetWithContext", _s...)
	ret0, _ := ret[0].(*cloudwatchevents.ListRuleNamesByTargetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCloudWatchEventsAPIRecorder) ListRuleNamesByTargetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListRuleNamesByTargetWithContext", _s...)
}

func (_m *MockCloudWatchEventsAPI) ListRules(_param0 *cloudwatchevents.ListRulesInput) (*cloudwatchevents.ListRulesOutput, error) {
	ret := _m.ctrl.Call(_m, "ListRules", _param0)
	ret0, _ := ret[0].(*cloudwatchevents.ListRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCloudWatchEventsAPIRecorder) ListRules(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListRules", arg0)
}

func (_m *MockCloudWatchEventsAPI) ListRulesRequest(_param0 *cloudwatchevents.ListRulesInput) (*request.Request, *cloudwatchevents.ListRulesOutput) {
	ret := _m.ctrl.Call(_m, "ListRulesRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.ListRulesOutput)
	return ret0, ret1
}

func (_mr *_MockCloudWatchEventsAPIRecorder) ListRulesRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListRulesRequest", arg0)
}

func (_m *MockCloudWatchEventsAPI) ListRulesWithContext(_param0 aws.Context, _param1 *cloudwatchevents.ListRulesInput, _param2 ...request.Option) (*cloudwatchevents.ListRulesOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ListRulesWithContext", _s...)
	ret0, _ := ret[0].(*cloudwatchevents.ListRulesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCloudWatchEventsAPIRecorder) ListRulesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListRulesWithContext", _s...)
}

func (_m *MockCloudWatchEventsAPI) ListTargetsByRule(_param0 *cloudwatchevents.ListTargetsByRuleInput) (*cloudwatchevents.ListTargetsByRuleOutput, error) {
	ret := _m.ctrl.Call(_m, "ListTargetsByRule", _param0)
	ret0, _ := ret[0].(*cloudwatchevents.ListTargetsByRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCloudWatchEventsAPIRecorder) ListTargetsByRule(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListTargetsByRule", arg0)
}

func (_m *MockCloudWatchEventsAPI) ListTargetsByRuleRequest(_param0 *cloudwatchevents.ListTargetsByRuleInput) (*request.Request, *cloudwatchevents.ListTargetsByRuleOutput) {
	ret := _m.ctrl.Call(_m, "ListTargetsByRuleRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.ListTargetsByRuleOutput)
	return ret0, ret1
}

func (_mr *_MockCloudWatchEventsAPIRecorder) ListTargetsByRuleRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListTargetsByRuleRequest", arg0)
}

func (_m *MockCloudWatchEventsAPI) ListTargetsByRuleWithContext(_param0 aws.Context, _param1 *cloudwatchevents.ListTargetsByRuleInput, _param2 ...request.Option) (*cloudwatchevents.ListTargetsByRuleOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ListTargetsByRuleWithContext", _s...)
	ret0, _ := ret[0].(*cloudwatchevents.ListTargetsByRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCloudWatchEventsAPIRecorder) ListTargetsByRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListTargetsByRuleWithContext", _s...)
}

func (_m *MockCloudWatchEventsAPI) PutEvents(_param0 *cloudwatchevents.PutEventsInput) (*cloudwatchevents.PutEventsOutput, error) {
	ret := _m.ctrl.Call(_m, "PutEvents", _param0)
	ret0, _ := ret[0].(*cloudwatchevents.PutEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCloudWatchEventsAPIRecorder) PutEvents(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutEvents", arg0)
}

func (_m *MockCloudWatchEventsAPI) PutEventsRequest(_param0 *cloudwatchevents.PutEventsInput) (*request.Request, *cloudwatchevents.PutEventsOutput) {
	ret := _m.ctrl.Call(_m, "PutEventsRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.PutEventsOutput)
	return ret0, ret1
}

func (_mr *_MockCloudWatchEventsAPIRecorder) PutEventsRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutEventsRequest", arg0)
}

func (_m *MockCloudWatchEventsAPI) PutEventsWithContext(_param0 aws.Context, _param1 *cloudwatchevents.PutEventsInput, _param2 ...request.Option) (*cloudwatchevents.PutEventsOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "PutEventsWithContext", _s...)
	ret0, _ := ret[0].(*cloudwatchevents.PutEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCloudWatchEventsAPIRecorder) PutEventsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutEventsWithContext", _s...)
}

func (_m *MockCloudWatchEventsAPI) PutPermission(_param0 *cloudwatchevents.PutPermissionInput) (*cloudwatchevents.PutPermissionOutput, error) {
	ret := _m.ctrl.Call(_m, "PutPermission", _param0)
	ret0, _ := ret[0].(*cloudwatchevents.PutPermissionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCloudWatchEventsAPIRecorder) PutPermission(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutPermission", arg0)
}

func (_m *MockCloudWatchEventsAPI) PutPermissionRequest(_param0 *cloudwatchevents.PutPermissionInput) (*request.Request, *cloudwatchevents.PutPermissionOutput) {
	ret := _m.ctrl.Call(_m, "PutPermissionRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.PutPermissionOutput)
	return ret0, ret1
}

func (_mr *_MockCloudWatchEventsAPIRecorder) PutPermissionRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutPermissionRequest", arg0)
}

func (_m *MockCloudWatchEventsAPI) PutPermissionWithContext(_param0 aws.Context, _param1 *cloudwatchevents.PutPermissionInput, _param2 ...request.Option) (*cloudwatchevents.PutPermissionOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "PutPermissionWithContext", _s...)
	ret0, _ := ret[0].(*cloudwatchevents.PutPermissionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCloudWatchEventsAPIRecorder) PutPermissionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutPermissionWithContext", _s...)
}

func (_m *MockCloudWatchEventsAPI) PutRule(_param0 *cloudwatchevents.PutRuleInput) (*cloudwatchevents.PutRuleOutput, error) {
	ret := _m.ctrl.Call(_m, "PutRule", _param0)
	ret0, _ := ret[0].(*cloudwatchevents.PutRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCloudWatchEventsAPIRecorder) PutRule(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutRule", arg0)
}

func (_m *MockCloudWatchEventsAPI) PutRuleRequest(_param0 *cloudwatchevents.PutRuleInput) (*request.Request, *cloudwatchevents.PutRuleOutput) {
	ret := _m.ctrl.Call(_m, "PutRuleRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.PutRuleOutput)
	return ret0, ret1
}

func (_mr *_MockCloudWatchEventsAPIRecorder) PutRuleRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutRuleRequest", arg0)
}

func (_m *MockCloudWatchEventsAPI) PutRuleWithContext(_param0 aws.Context, _param1 *cloudwatchevents.PutRuleInput, _param2 ...request.Option) (*cloudwatchevents.PutRuleOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "PutRuleWithContext", _s...)
	ret0, _ := ret[0].(*cloudwatchevents.PutRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCloudWatchEventsAPIRecorder) PutRuleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutRuleWithContext", _s...)
}

func (_m *MockCloudWatchEventsAPI) PutTargets(_param0 *cloudwatchevents.PutTargetsInput) (*cloudwatchevents.PutTargetsOutput, error) {
	ret := _m.ctrl.Call(_m, "PutTargets", _param0)
	ret0, _ := ret[0].(*cloudwatchevents.PutTargetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCloudWatchEventsAPIRecorder) PutTargets(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutTargets", arg0)
}

func (_m *MockCloudWatchEventsAPI) PutTargetsRequest(_param0 *cloudwatchevents.PutTargetsInput) (*request.Request, *cloudwatchevents.PutTargetsOutput) {
	ret := _m.ctrl.Call(_m, "PutTargetsRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.PutTargetsOutput)
	return ret0, ret1
}

func (_mr *_MockCloudWatchEventsAPIRecorder) PutTargetsRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutTargetsRequest", arg0)
}

func (_m *MockCloudWatchEventsAPI) PutTargetsWithContext(_param0 aws.Context, _param1 *cloudwatchevents.PutTargetsInput, _param2 ...request.Option) (*cloudwatchevents.PutTargetsOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "PutTargetsWithContext", _s...)
	ret0, _ := ret[0].(*cloudwatchevents.PutTargetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCloudWatchEventsAPIRecorder) PutTargetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutTargetsWithContext", _s...)
}

func (_m *MockCloudWatchEventsAPI) RemovePermission(_param0 *cloudwatchevents.RemovePermissionInput) (*cloudwatchevents.RemovePermissionOutput, error) {
	ret := _m.ctrl.Call(_m, "RemovePermission", _param0)
	ret0, _ := ret[0].(*cloudwatchevents.RemovePermissionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCloudWatchEventsAPIRecorder) RemovePermission(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemovePermission", arg0)
}

func (_m *MockCloudWatchEventsAPI) RemovePermissionRequest(_param0 *cloudwatchevents.RemovePermissionInput) (*request.Request, *cloudwatchevents.RemovePermissionOutput) {
	ret := _m.ctrl.Call(_m, "RemovePermissionRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.RemovePermissionOutput)
	return ret0, ret1
}

func (_mr *_MockCloudWatchEventsAPIRecorder) RemovePermissionRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemovePermissionRequest", arg0)
}

func (_m *MockCloudWatchEventsAPI) RemovePermissionWithContext(_param0 aws.Context, _param1 *cloudwatchevents.RemovePermissionInput, _param2 ...request.Option) (*cloudwatchevents.RemovePermissionOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "RemovePermissionWithContext", _s...)
	ret0, _ := ret[0].(*cloudwatchevents.RemovePermissionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCloudWatchEventsAPIRecorder) RemovePermissionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemovePermissionWithContext", _s...)
}

func (_m *MockCloudWatchEventsAPI) RemoveTargets(_param0 *cloudwatchevents.RemoveTargetsInput) (*cloudwatchevents.RemoveTargetsOutput, error) {
	ret := _m.ctrl.Call(_m, "RemoveTargets", _param0)
	ret0, _ := ret[0].(*cloudwatchevents.RemoveTargetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCloudWatchEventsAPIRecorder) RemoveTargets(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveTargets", arg0)
}

func (_m *MockCloudWatchEventsAPI) RemoveTargetsRequest(_param0 *cloudwatchevents.RemoveTargetsInput) (*request.Request, *cloudwatchevents.RemoveTargetsOutput) {
	ret := _m.ctrl.Call(_m, "RemoveTargetsRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.RemoveTargetsOutput)
	return ret0, ret1
}

func (_mr *_MockCloudWatchEventsAPIRecorder) RemoveTargetsRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveTargetsRequest", arg0)
}

func (_m *MockCloudWatchEventsAPI) RemoveTargetsWithContext(_param0 aws.Context, _param1 *cloudwatchevents.RemoveTargetsInput, _param2 ...request.Option) (*cloudwatchevents.RemoveTargetsOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "RemoveTargetsWithContext", _s...)
	ret0, _ := ret[0].(*cloudwatchevents.RemoveTargetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCloudWatchEventsAPIRecorder) RemoveTargetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveTargetsWithContext", _s...)
}

func (_m *MockCloudWatchEventsAPI) TestEventPattern(_param0 *cloudwatchevents.TestEventPatternInput) (*cloudwatchevents.TestEventPatternOutput, error) {
	ret := _m.ctrl.Call(_m, "TestEventPattern", _param0)
	ret0, _ := ret[0].(*cloudwatchevents.TestEventPatternOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCloudWatchEventsAPIRecorder) TestEventPattern(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TestEventPattern", arg0)
}

func (_m *MockCloudWatchEventsAPI) TestEventPatternRequest(_param0 *cloudwatchevents.TestEventPatternInput) (*request.Request, *cloudwatchevents.TestEventPatternOutput) {
	ret := _m.ctrl.Call(_m, "TestEventPatternRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*cloudwatchevents.TestEventPatternOutput)
	return ret0, ret1
}

func (_mr *_MockCloudWatchEventsAPIRecorder) TestEventPatternRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TestEventPatternRequest", arg0)
}

func (_m *MockCloudWatchEventsAPI) TestEventPatternWithContext(_param0 aws.Context, _param1 *cloudwatchevents.TestEventPatternInput, _param2 ...request.Option) (*cloudwatchevents.TestEventPatternOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "TestEventPatternWithContext", _s...)
	ret0, _ := ret[0].(*cloudwatchevents.TestEventPatternOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCloudWatchEventsAPIRecorder) TestEventPatternWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TestEventPatternWithContext", _s...)
}
